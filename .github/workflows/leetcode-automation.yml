name: 🚀 LeetCode Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 00:00 UTC to update progress stats
    - cron: '0 0 * * *'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 Setup Kotlin
        run: |
          wget -q https://github.com/JetBrains/kotlin/releases/latest/download/kotlin-compiler-*-linux-x64.zip
          unzip -q kotlin-compiler-*-linux-x64.zip
          echo "$PWD/kotlinc/bin" >> $GITHUB_PATH

      - name: 📦 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧪 Run unit tests
        run: |
          if [ -f "./gradlew" ]; then
            ./gradlew test --no-daemon
          else
            echo "⚠️ No Gradle wrapper found, running Kotlin tests manually"
            kotlinc -cp . tests/*.kt -include-runtime -d test-runner.jar
            java -jar test-runner.jar
          fi

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            build/test-results/
            build/reports/

  build-cli:
    name: 🔨 Build CLI Tool
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 Setup Kotlin
        run: |
          wget -q https://github.com/JetBrains/kotlin/releases/latest/download/kotlin-compiler-*-linux-x64.zip
          unzip -q kotlin-compiler-*-linux-x64.zip
          echo "$PWD/kotlinc/bin" >> $GITHUB_PATH

      - name: 🔨 Build CLI tool
        run: |
          chmod +x scripts/build-cli.sh
          ./scripts/build-cli.sh

      - name: 🧪 Test CLI functionality
        run: |
          build/cli/leetcode version
          build/cli/leetcode help

      - name: 📦 Upload CLI artifact
        uses: actions/upload-artifact@v3
        with:
          name: leetcode-cli
          path: build/cli/

  update-progress:
    name: 📈 Update Progress Stats
    runs-on: ubuntu-latest
    needs: [ test, build-cli ]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 Setup Kotlin
        run: |
          wget -q https://github.com/JetBrains/kotlin/releases/latest/download/kotlin-compiler-*-linux-x64.zip
          unzip -q kotlin-compiler-*-linux-x64.zip
          echo "$PWD/kotlinc/bin" >> $GITHUB_PATH

      - name: 📥 Download CLI artifact
        uses: actions/download-artifact@v3
        with:
          name: leetcode-cli
          path: build/cli/

      - name: 🔧 Make CLI executable
        run: chmod +x build/cli/leetcode

      - name: 📊 Calculate and update progress
        run: |
          echo "📈 Calculating current progress..."
          build/cli/leetcode stats
          build/cli/leetcode update

      - name: 🏆 Generate achievement badges
        run: |
          echo "🏆 Generating achievement badges..."
          
          # Count problems by difficulty
          EASY_COUNT=$(find src -name "*.kt" -path "*/easy/*" | wc -l)
          MEDIUM_COUNT=$(find src -name "*.kt" -path "*/medium/*" | wc -l) 
          HARD_COUNT=$(find src -name "*.kt" -path "*/hard/*" | wc -l)
          TOTAL_COUNT=$((EASY_COUNT + MEDIUM_COUNT + HARD_COUNT))
          
          echo "📊 Stats: Easy=$EASY_COUNT, Medium=$MEDIUM_COUNT, Hard=$HARD_COUNT, Total=$TOTAL_COUNT"
          
          # Update badge URLs in README
          sed -i "s/problems-[0-9]*-/problems-${TOTAL_COUNT}-/g" README.md
          sed -i "s/easy-[0-9]*-/easy-${EASY_COUNT}-/g" README.md
          sed -i "s/medium-[0-9]*-/medium-${MEDIUM_COUNT}-/g" README.md
          sed -i "s/hard-[0-9]*-/hard-${HARD_COUNT}-/g" README.md

      - name: 📝 Commit progress updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add README.md
            git commit -m "📊 Auto-update progress stats
          
            ✨ Current progress:
            - Easy: $EASY_COUNT problems
            - Medium: $MEDIUM_COUNT problems  
            - Hard: $HARD_COUNT problems
            - Total: $TOTAL_COUNT problems
          
            🤖 Updated by GitHub Actions"
          
            git push
            echo "✅ Progress updated and pushed!"
          else
            echo "ℹ️ No changes to commit"
          fi

  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [ test, build-cli, update-progress ]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '🏷️ release')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download CLI artifact
        uses: actions/download-artifact@v3
        with:
          name: leetcode-cli
          path: build/cli/

      - name: 🏷️ Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: LeetCode CLI v${{ github.run_number }}
          body: |
            🚀 **LeetCode CLI Tool Release**
            
            ## ✨ What's New
            - Professional workflow automation
            - Auto-commit and push features  
            - Progress tracking and statistics
            - Template generation for new problems
            
            ## 📦 Installation
            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/leetcode-cli.zip
            unzip leetcode-cli.zip
            
            # Install globally
            ./scripts/install-alias.sh
            ```
            
            ## 🎯 Usage
            ```bash
            leetcode create 002 AddTwoNumbers linkedlists medium
            leetcode complete 002 "Optimal solution with carry handling"
            leetcode stats
            ```
            
            ## 🎉 Happy Coding!
          draft: false
          prerelease: false

      - name: 📦 Upload Release Asset
        run: |
          zip -r leetcode-cli.zip build/cli/ scripts/
          # Upload would happen here with release assets

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [ test, build-cli, update-progress ]
    if: always()
    
    steps:
      - name: 📊 Workflow Summary
        run: |
          echo "## 🚀 LeetCode Automation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ Tests: **Passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests: **Failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-cli.result }}" = "success" ]; then
            echo "✅ CLI Build: **Success**" >> $GITHUB_STEP_SUMMARY  
          else
            echo "❌ CLI Build: **Failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.update-progress.result }}" = "success" ]; then
            echo "✅ Progress Update: **Success**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Progress Update: **Skipped/Failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Repository**: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Commit**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY